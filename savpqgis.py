# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SAVPqgis
                                 A QGIS plugin
 Este es un plugin para automatizar procesos del proyeto anillo vial periférico
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Luis Antony Meza
        email                : lmeza@mtc.gob.pe
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QCoreApplication
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction,QMenu,QMessageBox
from qgis.core import QgsExpressionContextUtils,Qgis,QgsVectorFileWriter,QgsProject,QgsVectorLayer,QgsRasterLayer,QgsCoordinateReferenceSystem

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
#from .savpqgis_dialog import SAVPqgisDialog
import os.path
import requests

from urllib.request import urlopen
from urllib.error import URLError, HTTPError


from .savpqgis_login import savpqgisLogin
from .acceso import AccesoToken


class savpqgis:
    """QGIS Plugin Implementation."""
    def __init__(self, iface):
        '''
        Constructor
        '''
        self.iface = iface
        self.savpqgis_menu =  None
        self.registry = QgsProject.instance()
        
        
    def initGui(self):
        self.savpqgis_menu = QMenu(QCoreApplication.translate("savpqgis", "Proyecto AVP"))
        self.iface.mainWindow().menuBar().insertMenu(self.iface.firstRightStandardMenu().menuAction(), self.savpqgis_menu)
        
        icon = QIcon(os.path.dirname(__file__) + "/icons/icon.png")
        self.animate_lines_action = QAction(icon, "Iniciar Sesión", self.iface.mainWindow())
        self.animate_lines_action.triggered.connect(self.login)
        self.savpqgis_menu.addAction(self.animate_lines_action)
         
        icon = QIcon(os.path.dirname(__file__) + "/icons/logout.png")
        self.close_action = QAction(icon, "Cerrar Sesión", self.iface.mainWindow())
        self.close_action.triggered.connect(self.logout)
        self.close_action.setEnabled(False)
        self.savpqgis_menu.addAction(self.close_action)
        
        icon = QIcon(os.path.dirname(__file__) + "/icons/load.png")
        self.migration_action = QAction(icon, "Cargar Capas", self.iface.mainWindow())
        self.migration_action.triggered.connect(self.loadLayer)
        self.migration_action.setEnabled(False)
        self.savpqgis_menu.addAction(self.migration_action)
        
        
    def unload(self):
        self.iface.mainWindow().menuBar().removeAction(self.savpqgis_menu.menuAction())
        
    def loadLayer(self):
        
        self.registry.setCrs(QgsCoordinateReferenceSystem(4326))
        
        uri = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_cofopri"
        uri2 = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_comunidades_campesinas"
        uri3 = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_predio_matriz"
        uri4 = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_predio_rural"
        uri5 = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_sitios_arqueologicos"
        uri6 = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_sunarp_lima_psad56"
        uri7 = "http://200.121.128.102:8080/geoserver/avp/ows?service=WFS&version=1.0.0&request=GetFeature&typeName=avp:vm_sunarp_lima_wgs84"
               
        val = len(QgsProject.instance().mapLayersByName("Cofopri AVP"))
        val2 = len(QgsProject.instance().mapLayersByName("Comunidades Campesinas AVP"))
        val4 = len(QgsProject.instance().mapLayersByName("Predio Matriz AVP"))
        val5 = len(QgsProject.instance().mapLayersByName("Predio Rural AVP"))
        val6 = len(QgsProject.instance().mapLayersByName("Sitios Arqueologicos AVP"))
        val3 = len(QgsProject.instance().mapLayersByName("Anillo Vial"))
        val7 = len(QgsProject.instance().mapLayersByName("Sunarp Lima PSAD56 AVP"))
        val8 = len(QgsProject.instance().mapLayersByName("Sunarp Lima WGS84 AVP"))
        
        #verificando conexion a internet
        self.internet_on(uri)
        
        if  val2 == 0 :
            
            vlayer = QgsVectorLayer(uri2, "Comunidades Campesinas AVP", "WFS") 
          
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + '/data/comunidades_campesinas_avp.geojson',
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + '/data/comunidades_campesinas_avp.geojson',"Comunidades Campesinas AVP","ogr")
                self.registry.addMapLayer(capa)
            else:
                print (writer[1])
                
        if  val == 0 :
            vlayer = QgsVectorLayer(uri, "Cofopri AVP", "WFS")
        
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + "/data/cofopri_avp.geojson",
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + "/data/cofopri_avp.geojson","Cofopri AVP","ogr")
                #capa.loadSldStyle(os.path.dirname(__file__) + "/styles/style.sld")
                #capa.triggerRepaint()
                self.registry.addMapLayer(capa)
                      
            else:
                print (writer[1])
                
        if  val4 == 0 :
            vlayer = QgsVectorLayer(uri3, "Predio Matriz AVP", "WFS")
        
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + "/data/predio_matriz_avp.geojson",
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + "/data/predio_matriz_avp.geojson","Predio Matriz AVP","ogr")
                #capa.loadSldStyle(os.path.dirname(__file__) + "/styles/style.sld")
                #capa.triggerRepaint()
                self.registry.addMapLayer(capa)
                      
            else:
                print (writer[1])
        
        if  val5 == 0 :
            vlayer = QgsVectorLayer(uri4, "Predio Rural AVP", "WFS")
        
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + "/data/predio_rural_avp.geojson",
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + "/data/predio_rural_avp.geojson","Predio Rural AVP","ogr")
                #capa.loadSldStyle(os.path.dirname(__file__) + "/styles/style.sld")
                #capa.triggerRepaint()
                self.registry.addMapLayer(capa)
                      
            else:
                print (writer[1])  
        
        if  val6 == 0 :
            vlayer = QgsVectorLayer(uri5, "Sitios Arqueologicos AVP", "WFS")
        
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + "/data/sitios_arqueologicos_avp.geojson",
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + "/data/sitios_arqueologicos_avp.geojson","Sitios Arqueologicos AVP","ogr")
                #capa.loadSldStyle(os.path.dirname(__file__) + "/styles/style.sld")
                #capa.triggerRepaint()
                self.registry.addMapLayer(capa)
                      
            else:
                print (writer[1])
                
        if  val7 == 0 :
            vlayer = QgsVectorLayer(uri6, "Sunarp Lima PSAD56 AVP", "WFS")
        
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + "/data/sunarp_lima_psad56_avp.geojson",
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + "/data/sunarp_lima_psad56_avp.geojson","Sunarp Lima PSAD56 AVP","ogr")
                #capa.loadSldStyle(os.path.dirname(__file__) + "/styles/style.sld")
                #capa.triggerRepaint()
                self.registry.addMapLayer(capa)
                      
            else:
                print (writer[1])  
        
        if  val8 == 0 :
            vlayer = QgsVectorLayer(uri7, "Sunarp Lima WGS84 AVP", "WFS")
        
            writer = QgsVectorFileWriter.writeAsVectorFormat(vlayer,
                                                            os.path.dirname(__file__) + "/data/sunarp_lima_wgs84_avp.geojson",
                                                            "UTF-8",
                                                            vlayer.crs(),
                                                            "GeoJSON")
            
            #verificando algun error
            if writer[0] == QgsVectorFileWriter.NoError:
                print ("success!")
                self.iface.messageBar().pushMessage("Capa",'Conectando al WFS', Qgis.Info)
                capa = QgsVectorLayer(os.path.dirname(__file__) + "/data/sunarp_lima_wgs84_avp.geojson","Sunarp Lima WGS84 AVP","ogr")
                #capa.loadSldStyle(os.path.dirname(__file__) + "/styles/style.sld")
                #capa.triggerRepaint()
                self.registry.addMapLayer(capa)
                      
            else:
                print (writer[1])            
                       
        if  val3 == 0 :    
            urlWithParams = "crs=EPSG:4326&dpiMode=7&format=image/png&layers=anillovial&styles&url=http://200.121.128.102:8080/geoserver/ddp/wms"
        
            vlayer = QgsRasterLayer(urlWithParams, 'Anillo Vial', 'wms')
            self.registry.addMapLayer(vlayer)
            
            if vlayer.isValid():
                self.iface.messageBar().pushMessage("Capa",'Conectando al WMS', Qgis.Info)
                QMessageBox.information(self.iface.mainWindow(), "Mensaje", 'Su descarga fue satisfactorio')
            else:
                self.iface.messageBar().pushMessage("Error", vlayer.error().message(), level=Qgis.Critical)
        
                #dialog = srvqgisDialog(self.iface)
                #dialog.exec_()
        
    def login(self):
        dialog2 =  savpqgisLogin(self.savpqgis_menu,self.iface)
        dialog2.exec_()
        
    def logout(self):
        self.animate_lines_action.setEnabled(True)
        self.migration_action.setEnabled(False)
        self.close_action.setEnabled(False)
        AccesoToken.acces_key=''
        QgsExpressionContextUtils.removeGlobalVariable('user_mtc')
        
    def internet_on(self, url):        
        try:
            urlopen(url, timeout = 5)
        except HTTPError:
            # do something
            self.iface.messageBar().pushMessage("Error", "La URL no existe", level=Qgis.Critical)
            return
        except URLError:
            self.iface.messageBar().pushMessage("Error", "Esta desconectado a internet", level=Qgis.Critical)
            return
        else:
            # do something
            print('good!')